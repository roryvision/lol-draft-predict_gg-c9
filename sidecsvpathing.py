# -*- coding: utf-8 -*-
"""pathing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j07oNsF7qF9hnL8ET0VWcmbiKD72_Sww
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# New Section"""

gs= pd.read_parquet("/content/game_summary.parquet")

sc = gs.loc[:, ['game_urn', 'team_1_name','team_1_side','team_2_name', 'team_2_side']]

sc.head()



snap = pd.read_parquet("/content/snapshot_player_stats.parquet")

snap.columns

columns_to_remove = ['health', 'current_gold', 'total_gold', 'gold_per_second',
    'wards_placed', 'wards_killed', 'vision_score',
    'total_damage_dealt_champions', 'total_damage_taken',
    'item_1_id', 'item_2_id', 'item_3_id',
    'item_4_id', 'item_5_id', 'item_6_id', 'item_7_id'
]

# Use the drop method to remove the specified columns
new_df = snap.drop(columns=columns_to_remove)

nsnap = new_df

blaber = nsnap[nsnap['player']=='Blaber']

blaber.head()

side= blaber.merge(sc, on='game_urn', how='left')

side.shape

side.head()

def determine_side(row):
    if row['team_1_name'] == 'C9':
        return row['team_1_side']
    elif row['team_2_name'] == 'C9':
        return row['team_2_side']
    else:
        return None  # Or a default value if needed

# Apply the custom function to create the new 'side' column
side['side'] = side.apply(determine_side, axis=1)

# Drop the original 'team1name' and 'team2name' columns if you don't need them
side.drop(['team_1_name', 'team_2_name','team_1_side','team_2_side'], axis=1, inplace=True)

side.to_csv('output.csv', index=False)

side.head()

unique_games = blaber['game_urn'].unique()
game = blaber[blaber['game_urn']==unique_games[1]]

# Create a figure and axis for the plot
fig, ax = plt.subplots()

# Plot the Summoner's Rift map (assuming X and Y are the coordinates in your data)
ax.set_xlim(0, 16000)
ax.set_ylim(0, 16000)

# Plot the player's path over the game
ax.plot(game['pos_x'], game['pos_y'], marker='o', markersize=3, label='blaber')

# Customize the plot appearance (you can further customize as needed)
ax.set_title('blaber Path in Game')
ax.set_xlabel('X Coordinate')
ax.set_ylabel('Y Coordinate')
ax.legend()

# Show the plot
plt.show()

# Create a figure and axis for the heatmap
fig, ax = plt.subplots()

# Plot the Summoner's Rift map
ax.set_xlim(0, 16000)
ax.set_ylim(0, 16000)

# Iterate through each game and plot the player's path as a heatmap

ax.scatter(game['pos_x'], game['pos_y'], s=3, alpha=0.5)

# Customize the plot appearance (you can further customize as needed)
ax.set_title('blaber Path in Multiple Games')
ax.set_xlabel('X Coordinate')
ax.set_ylabel('Y Coordinate')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

# Show the heatmap plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


# Specify the game you want to create a heatmap for (e.g., the first game)
selected_game = unique_games[0]

# Filter data for the selected game and player
game = blaber[(blaber['game_urn'] == selected_game)]

# Create a figure and axis for the heatmap
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the Summoner's Rift map
ax.set_xlim(0, 16000)
ax.set_ylim(0, 16000)

# Create a heatmap using plt.hist2d
heatmap = plt.hist2d(game['pos_x'], game['pos_y'], bins=[100, 100], cmap='plasma', cmin=1)

# Add a colorbar
cbar = plt.colorbar(heatmap[3])

# Customize the plot appearance (you can further customize as needed)
plt.title('Blaber\'s Heatmap in One Game')
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')

# Show the heatmap plot
plt.show()

unique_games = blaber['game_urn'].unique()
game = blaber[blaber['game_urn']==unique_games[1]]
# Create a figure and axis for the heatmap
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the Summoner's Rift map
ax.set_xlim(0, 16000)
ax.set_ylim(0, 16000)

# Create empty arrays to store X and Y coordinates
all_x = []
all_y = []

# Iterate through each game and collect X and Y coordinates
for game_id in unique_games:
    game = blaber[blaber['game_urn'] == game_id]
    all_x.extend(game['pos_x'])
    all_y.extend(game['pos_y'])

# Create a heatmap using plt.hist2d
heatmap = plt.hist2d(all_x, all_y, bins=[100,100], cmap='plasma', cmin=1,vmin = -300,vmax = 300)

# Add a colorbar
cbar = plt.colorbar(heatmap[3])

# Customize the plot appearance (you can further customize as needed)
plt.title('Blaber\'s Heatmap in Multiple Games')
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')

# Show the heatmap plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# Assuming blaber is your DataFrame

# Get unique game IDs for Blaber
unique_games = blaber['game_urn'].unique()

# Create a figure and axis for the heatmap
fig, ax = plt.subplots(figsize=(12, 6))
ax.set_xlim(0, 16000)
ax.set_ylim(0, 16000)

# Define the maximum game time in milliseconds
max_game_time = blaber['game_time'].max()

# Create a function to update the heatmap based on the game time
def update_heatmap(game_time):
    game = blaber[(blaber['game_time'] <= game_time)]
    heatmap = ax.hist2d(game['pos_x'], game['pos_y'], bins=[100, 100], cmap='plasma', cmin=1, vmin=-300, vmax=300)
    ax.set_title(f'Blaber\'s Heatmap at {game_time} ms')

# Create an animation
ani = FuncAnimation(fig, update_heatmap, frames=range(0, max_game_time, 1000), repeat=False, interval=100)

# Save the animation as a video (requires Pillow library)
ani.save('blaber_heatmap_animation.mp4', writer='pillow', fps=10)

# Display the animation
HTML(ani.to_jshtml())

# Keep the animation object in scope
anim = ani

# Show the animation
plt.show()